generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  roleId                String?
  role                  Role?                  @relation(fields: [roleId], references: [id])
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  invitedBy             String?                // ID of user who invited this user
  invitedByUser         User?                  @relation("UserInvitations", fields: [invitedBy], references: [id])
  invitedUsers          User[]                 @relation("UserInvitations")
  userInvitations       UserInvitation[]       @relation("InvitedBy")
  receivedInvitations   UserInvitation[]       @relation("InvitedUser")
  lastLoginAt           DateTime?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([email])
  @@index([roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Image {
  id   String @id @default(cuid())
  data Bytes  @db.MediumBlob
  type String
  size Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id   String @id @default(cuid())
  data Bytes  @db.LongBlob
  type String
  size Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  Duration  String
  Active    Boolean
  imageId   String?  @unique
  galleryId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Innovator {
  id                 String           @id @default(cuid()) // Fixed for MySQL
  name               String
  imageId            String?
  email              String
  phone              String
  projectTitle       String
  projectDescription String?
  objective          String?
  stageDevelopment   StageDevelopment
  status             RecordStatus     @default(PENDING)
  isVisible          Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  emailLogs          EmailLog[]       @relation("InnovatorEmails")
}

model Collaborator {
  id                         String       @id @default(cuid())
  companyName                String
  primaryPhoneNumber         String
  optionalPhoneNumber        String?
  email                      String       // Made required
  location                   String?
  site                       String?
  industrialSector           String
  specialization             String
  experienceProvided         String?      @db.Text
  machineryAndEquipment      String?      @db.Text
  imageId                    String?
  status                     RecordStatus @default(PENDING)
  isVisible                  Boolean      @default(false)
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  experienceProvidedMedia    ExperienceProvidedMedia[]
  machineryAndEquipmentMedia MachineryAndEquipmentMedia[]
  emailLogs                  EmailLog[]   @relation("CollaboratorEmails")
}

model ExperienceProvidedMedia {
  id             String        @id @default(cuid())
  media          String
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model MachineryAndEquipmentMedia {
  id             String        @id @default(cuid())
  media          String
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum StageDevelopment {
  STAGE
  PROTOTYPE
  DEVELOPMENT
  TESTING
  RELEASED
}

enum RecordStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

// Role-based access control models
model Role {
  id              String             @id @default(cuid())
  name            String             @unique
  description     String?
  isSystem        Boolean            @default(false) // System roles cannot be deleted
  users           User[]
  permissions     RolePermission[]
  userInvitations UserInvitation[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([name])
}

model Permission {
  id          String             @id @default(cuid())
  name        String             @unique
  resource    String             // e.g., "news", "users", "collaborators"
  action      String             // e.g., "create", "read", "update", "delete"
  description String?
  roles       RolePermission[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([resource, action])
  @@index([resource])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserInvitation {
  id          String            @id @default(cuid())
  email       String
  token       String            @unique
  roleId      String
  role        Role              @relation(fields: [roleId], references: [id])
  invitedBy   String
  inviter     User              @relation("InvitedBy", fields: [invitedBy], references: [id])
  acceptedBy  String?
  acceptedUser User?            @relation("InvitedUser", fields: [acceptedBy], references: [id])
  status      InvitationStatus  @default(PENDING)
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([email])
  @@index([token])
  @@index([status])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Email tracking models
model EmailLog {
  id             String           @id @default(cuid())
  to             String
  from           String
  subject        String
  template       String
  status         EmailStatus      @default(PENDING)
  errorMessage   String?          @db.Text
  metadata       Json?
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  complaintAt    DateTime?
  messageId      String?          @unique
  collaboratorId String?
  collaborator   Collaborator?    @relation("CollaboratorEmails", fields: [collaboratorId], references: [id])
  innovatorId    String?
  innovator      Innovator?       @relation("InnovatorEmails", fields: [innovatorId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([to])
  @@index([status])
  @@index([template])
  @@index([sentAt])
}

model EmailTemplate {
  id          String               @id @default(cuid())
  name        String               @unique
  subject     String
  body        String               @db.Text
  variables   Json?                // JSON array of required variables
  isActive    Boolean              @default(true)
  category    EmailTemplateCategory
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([name])
  @@index([category])
}

model EmailQueue {
  id          String         @id @default(cuid())
  to          String
  subject     String
  template    String
  data        Json
  priority    Int            @default(0)
  attempts    Int            @default(0)
  maxAttempts Int            @default(3)
  status      QueueStatus    @default(PENDING)
  error       String?        @db.Text
  processedAt DateTime?
  scheduledFor DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  emailActions EmailAction[]

  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
}

model EmailAction {
  id             String      @id @default(cuid())
  emailQueueId   String
  emailQueue     EmailQueue  @relation(fields: [emailQueueId], references: [id], onDelete: Cascade)
  tokenHash      String      @unique
  actionTypes    Json
  used           Boolean     @default(false)
  usedAt         DateTime?
  expiresAt      DateTime
  data           Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([tokenHash])
  @@index([used])
  @@index([expiresAt])
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINT
  FAILED
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum EmailTemplateCategory {
  SUBMISSION_CONFIRMATION
  ADMIN_NOTIFICATION
  APPROVAL_NOTIFICATION
  REJECTION_NOTIFICATION
  SYSTEM
  MARKETING
}
